#+TITLE: Emacs config
#+AUTHOR: Mukhammad Ilkhomov
#+PROPERTY: header-args :tangle /home/admin1475963/.config/emacs/init.el


* Package manage


** Setup package.el

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
#+END_SRC


** Installing use-package

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC


* GUI settings


** Theme

#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :config
    (load-theme 'dracula t))
#+END_SRC


** Fonts

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil
    :font "Hack 10"
    :weight 'medium)
#+END_SRC


* Basic editor settings

** Line numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
#+END_SRC


** Highlight line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC


** Indentation

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+END_SRC


** Text width

#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  (setq-default display-fill-column-indicator t)
  (setq-default display-fill-column-indicator-character ?\u2502)
#+END_SRC


** Show trainling spaces

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC


** Disable autosave and backup

#+BEGIN_SRC emacs-lisp
  (setq-default make-backup-files nil)
  (setq-default auto-save-default nil)
#+END_SRC

** Tab bar

#+BEGIN_SRC emacs-lisp
  (setq-default tab-bar-mode t)
#+END_SRC


** Turn off menu, toolbar and scrollbar

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC


** Zooming in and out

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-=") 'text-scale-increase)
  (define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC


** Scroll step

#+BEGIN_SRC emacs-lisp
  (setq-default scroll-step 1)
#+END_SRC


* Basic key-bindings

** evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC

** key-chord

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :config
    (key-chord-mode 1))
#+END_SRC

** general

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup))
#+END_SRC


** Key-bindings

#+BEGIN_SRC emacs-lisp
  (evil-set-leader '(normal motion) (kbd "<SPC>"))

  (general-imap "j"
    (general-key-dispatch 'self-insert-command
      :timeout 0.25
      "k" 'evil-normal-state))

  (general-define-key
   :states '(normal visual)
   :keymaps 'global
   :prefix "<leader>"
   "SPC" 'execute-extended-command
   "c r" (lambda () (interactive) (load-file "~/.config/emacs/init.el"))
   "t n" 'tab-new
   "t c" 'tab-close
   "t h" 'tab-previous
   "t l" 'tab-next
   "w h" 'windmove-left
   "w l" 'windmove-right
   "w j" 'windmove-down
   "w k" 'windmove-up
   "s v" 'split-window-vertically
   "s h" 'split-window-horizontally
   "b b" 'ivy-switch-buffer
   "b l" 'list-buffers
   "b k" 'kill-buffer
   "r p" 'point-to-register
   "r j" 'jump-to-register
   "r c" 'copy-to-register
   "r i" 'insert-register
   "r m s" 'bookmark-set
   "r m j" 'bookmark-jump
   "r m l" 'list-bookmarks
   "e" 'find-file
   "i" 'imenu
  )
#+END_SRC


* Help

** Which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC


* Minibuffer

** ivy

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode))
#+END_SRC

* Autocomplete

** auto-compete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :config
    (ac-config-default)
  )
#+END_SRC


* Org mode

** Config
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'org-mode-map
   "TAB" 'org-cycle)

  (general-define-key
   :prefix "<leader>"
   :keymaps 'org-mode-map
   "o t" 'org-todo
   )

  (add-hook 'org-mode-hook
            (lambda () (setq display-fill-column-indicator nil)))

  (setq-default org-src-preserve-indentation nil)
  (setq-default org-catch-invisible-edits 'error)
#+END_SRC


** org-agenda
#+BEGIN_SRC emacs-lisp
  (setq-default org-agenda-files '("~/Org"))
#+END_SRC


** org-roam
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :config
    (setq-default org-roam-directory (file-truename "~/Org"))
    (org-roam-db-autosync-mode)
  )

  (general-define-key
   :prefix "<leader>"
   :keymaps 'org-mode-map
   "o r n" 'org-roam-node-insert
   "o r t" 'org-roam-buffer-toggle)
#+END_SRC


** org-roam-ui
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui)
#+END_SRC


* Elglot

#+BEGIN_SRC emacs-lisp
  (use-package eglot)
#+END_SRC

* Tex

#+BEGIN_SRC emacs-lisp
  (use-package tex)

  (setq-default TeX-auto-save t)
  (setq-default TeX-parse-self t)
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-view-program-selection
      '((output-pdf "Okular"))
  )
  (setq-default font-latex-fontify-script nil)
  (add-hook 'LaTeX-mode-hook (lambda ()
      (setq display-fill-column-indicator nil)
  ))

  (custom-set-faces '(preview-reference-face ((t (:background "white")))))
#+END_SRC


* Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
#+END_SRC
